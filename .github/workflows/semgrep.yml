name: Security Scans and Upload to DefectDojo

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

permissions:
  contents: read

jobs:
  security-scans:
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep:1.78.0

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        run: | 
          semgrep \
            --json \
            --output semgrep-results.json \
            --metrics=off \
            --config="p/default"

      - name: Install Python and dependencies
        run: |
          apt-get update
          apt-get install -y python3 python3-pip
          pip3 install requests

      - name: Create upload script
        run: |
          cat << 'EOF' > upload_to_defectdojo.py
          import requests
          import sys
          import os
          from datetime import datetime

          class DefectDojoUploader:
              def init(self, url, api_key):
                  self.url = url
                  self.headers = {'Authorization': f'Token {api_key}'}

              def find_engagement(self, product_id, repo_name):
                  response = requests.get(
                      f"{self.url}/api/v2/engagements/",
                      headers=self.headers,
                      params={'name': f"Scan-{repo_name}"}
                  )
                  results = response.json().get('results', [])
                  return results[0]['id'] if results else None

              def create_engagement(self, product_id, repo_name):
                  data = {
                      'name': f"Scan-{repo_name}",
                      'product': product_id,
                      'target_start': datetime.now().strftime('%Y-%m-%d'),
                      'target_end': datetime.now().strftime('%Y-%m-%d'),
                      'status': 'In Progress'
                  }
                  response = requests.post(
                      f"{self.url}/api/v2/engagements/",
                      headers=self.headers,
                      json=data
                  )
                  return response.json()['id']

              def get_product_id(self, product_name):
                  response = requests.get(
                      f"{self.url}/api/v2/products/",
                      headers=self.headers,
                      params={'name': product_name}
                  )
                  results = response.json().get('results', [])
                  return results[0]['id'] if results else None

              def upload_scan(self, file_path, scan_type, product_name, repo_name):
                  product_id = self.get_product_id(product_name)
                  if not product_id:
                      print(f"Error: Product {product_name} not found")
                      return False

                  engagement_id = self.find_engagement(product_id, repo_name)
                  if not engagement_id:
                      engagement_id = self.create_engagement(product_id, repo_name)

                  with open(file_path, 'rb') as f:
                      files = {'file': f}
                      data = {
                          'engagement': engagement_id,
                          'scan_type': scan_type,
                          'minimum_severity': 'Info',
                          'active': True,
                          'verified': True,
                          'close_old_findings': True,
                          'do_not_reactivate': True
                      }
                      response = requests.post(
                          f"{self.url}/api/v2/import-scan/",
                          headers=self.headers,
                          files=files,
                          data=data
                      )
                  return response.status_code == 201
                  if name == 'main':
              uploader = DefectDojoUploader(
                  os.environ['DEFECTDOJO_URL'],
                  os.environ['DEFECTDOJO_API_KEY']
              )
              success = uploader.upload_scan(
                  sys.argv[1],  # file_path
                  sys.argv[2],  # scan_type
                  sys.argv[3],  # product_name
                  sys.argv[4]   # repo_name
              )
              sys.exit(0 if success else 1)
          EOF

      - name: Upload Semgrep Results to DefectDojo
        env:
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
        run: |
          if [ -f semgrep-results.json ]; then
            python3 upload_to_defectdojo.py \
              "semgrep-results.json" \
              "Semgrep JSON Report" \
              "SemgrepTest" \
              "${{ github.repository }}"
          else
            echo "Error: semgrep-results.json not found!"
            exit 1
          fi
